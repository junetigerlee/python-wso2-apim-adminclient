# coding: utf-8

"""
    WSO2 API Manager - Admin

    This document specifies a **RESTful API** for WSO2 **API Manager** - Admin Portal.  It is written with [swagger 2](http://swagger.io/). 

    OpenAPI spec version: 0.11.0
    Contact: architecture@wso2.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class MediationIndividualApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def policies_mediation_mediation_policy_id_delete(self, mediation_policy_id, **kwargs):
        """
        Delete an API
        This operation can be used to delete an existing API proving the Id of the API. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.policies_mediation_mediation_policy_id_delete(mediation_policy_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str mediation_policy_id: Mediation policy Id  (required)
        :param str if_match: Validator for conditional requests; based on ETag. 
        :param str if_unmodified_since: Validator for conditional requests; based on Last Modified header. 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.policies_mediation_mediation_policy_id_delete_with_http_info(mediation_policy_id, **kwargs)
        else:
            (data) = self.policies_mediation_mediation_policy_id_delete_with_http_info(mediation_policy_id, **kwargs)
            return data

    def policies_mediation_mediation_policy_id_delete_with_http_info(self, mediation_policy_id, **kwargs):
        """
        Delete an API
        This operation can be used to delete an existing API proving the Id of the API. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.policies_mediation_mediation_policy_id_delete_with_http_info(mediation_policy_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str mediation_policy_id: Mediation policy Id  (required)
        :param str if_match: Validator for conditional requests; based on ETag. 
        :param str if_unmodified_since: Validator for conditional requests; based on Last Modified header. 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mediation_policy_id', 'if_match', 'if_unmodified_since']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method policies_mediation_mediation_policy_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mediation_policy_id' is set
        if ('mediation_policy_id' not in params) or (params['mediation_policy_id'] is None):
            raise ValueError("Missing the required parameter `mediation_policy_id` when calling `policies_mediation_mediation_policy_id_delete`")


        collection_formats = {}

        path_params = {}
        if 'mediation_policy_id' in params:
            path_params['mediationPolicyId'] = params['mediation_policy_id']

        query_params = []

        header_params = {}
        if 'if_match' in params:
            header_params['If-Match'] = params['if_match']
        if 'if_unmodified_since' in params:
            header_params['If-Unmodified-Since'] = params['if_unmodified_since']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['OAuth2']

        return self.api_client.call_api('/policies/mediation/{mediationPolicyId}', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def policies_mediation_mediation_policy_id_get(self, mediation_policy_id, **kwargs):
        """
        Get a global mediation squence
        This operation can be used to retrieve a particular global mediation policy. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.policies_mediation_mediation_policy_id_get(mediation_policy_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str mediation_policy_id: Mediation policy Id  (required)
        :param str accept: Media types acceptable for the response. Default is JSON. 
        :param str if_none_match: Validator for conditional requests; based on the ETag of the formerly retrieved variant of the resourec. 
        :param str if_modified_since: Validator for conditional requests; based on Last Modified header of the formerly retrieved variant of the resource. 
        :return: Mediation2
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.policies_mediation_mediation_policy_id_get_with_http_info(mediation_policy_id, **kwargs)
        else:
            (data) = self.policies_mediation_mediation_policy_id_get_with_http_info(mediation_policy_id, **kwargs)
            return data

    def policies_mediation_mediation_policy_id_get_with_http_info(self, mediation_policy_id, **kwargs):
        """
        Get a global mediation squence
        This operation can be used to retrieve a particular global mediation policy. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.policies_mediation_mediation_policy_id_get_with_http_info(mediation_policy_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str mediation_policy_id: Mediation policy Id  (required)
        :param str accept: Media types acceptable for the response. Default is JSON. 
        :param str if_none_match: Validator for conditional requests; based on the ETag of the formerly retrieved variant of the resourec. 
        :param str if_modified_since: Validator for conditional requests; based on Last Modified header of the formerly retrieved variant of the resource. 
        :return: Mediation2
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mediation_policy_id', 'accept', 'if_none_match', 'if_modified_since']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method policies_mediation_mediation_policy_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mediation_policy_id' is set
        if ('mediation_policy_id' not in params) or (params['mediation_policy_id'] is None):
            raise ValueError("Missing the required parameter `mediation_policy_id` when calling `policies_mediation_mediation_policy_id_get`")


        collection_formats = {}

        path_params = {}
        if 'mediation_policy_id' in params:
            path_params['mediationPolicyId'] = params['mediation_policy_id']

        query_params = []

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']
        if 'if_none_match' in params:
            header_params['If-None-Match'] = params['if_none_match']
        if 'if_modified_since' in params:
            header_params['If-Modified-Since'] = params['if_modified_since']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['OAuth2']

        return self.api_client.call_api('/policies/mediation/{mediationPolicyId}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Mediation2',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def policies_mediation_mediation_policy_id_put(self, mediation_policy_id, body, content_type, **kwargs):
        """
        Update an mediation policy
        This operation can be used to update an existing API. But the properties `name`, `version`, `context`, `provider`, `state` will not be changed by this operation. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.policies_mediation_mediation_policy_id_put(mediation_policy_id, body, content_type, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str mediation_policy_id: Mediation policy Id  (required)
        :param Mediation3 body: Mediation policy object that needs to be added  (required)
        :param str content_type: Media type of the entity in the body. Default is JSON.  (required)
        :param str if_match: Validator for conditional requests; based on ETag. 
        :param str if_unmodified_since: Validator for conditional requests; based on Last Modified header. 
        :return: Mediation2
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.policies_mediation_mediation_policy_id_put_with_http_info(mediation_policy_id, body, content_type, **kwargs)
        else:
            (data) = self.policies_mediation_mediation_policy_id_put_with_http_info(mediation_policy_id, body, content_type, **kwargs)
            return data

    def policies_mediation_mediation_policy_id_put_with_http_info(self, mediation_policy_id, body, content_type, **kwargs):
        """
        Update an mediation policy
        This operation can be used to update an existing API. But the properties `name`, `version`, `context`, `provider`, `state` will not be changed by this operation. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.policies_mediation_mediation_policy_id_put_with_http_info(mediation_policy_id, body, content_type, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str mediation_policy_id: Mediation policy Id  (required)
        :param Mediation3 body: Mediation policy object that needs to be added  (required)
        :param str content_type: Media type of the entity in the body. Default is JSON.  (required)
        :param str if_match: Validator for conditional requests; based on ETag. 
        :param str if_unmodified_since: Validator for conditional requests; based on Last Modified header. 
        :return: Mediation2
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mediation_policy_id', 'body', 'content_type', 'if_match', 'if_unmodified_since']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method policies_mediation_mediation_policy_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mediation_policy_id' is set
        if ('mediation_policy_id' not in params) or (params['mediation_policy_id'] is None):
            raise ValueError("Missing the required parameter `mediation_policy_id` when calling `policies_mediation_mediation_policy_id_put`")
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `policies_mediation_mediation_policy_id_put`")
        # verify the required parameter 'content_type' is set
        if ('content_type' not in params) or (params['content_type'] is None):
            raise ValueError("Missing the required parameter `content_type` when calling `policies_mediation_mediation_policy_id_put`")


        collection_formats = {}

        path_params = {}
        if 'mediation_policy_id' in params:
            path_params['mediationPolicyId'] = params['mediation_policy_id']

        query_params = []

        header_params = {}
        if 'content_type' in params:
            header_params['Content-Type'] = params['content_type']
        if 'if_match' in params:
            header_params['If-Match'] = params['if_match']
        if 'if_unmodified_since' in params:
            header_params['If-Unmodified-Since'] = params['if_unmodified_since']

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['OAuth2']

        return self.api_client.call_api('/policies/mediation/{mediationPolicyId}', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Mediation2',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
