# coding: utf-8

"""
    WSO2 API Manager - Admin

    This document specifies a **RESTful API** for WSO2 **API Manager** - Admin Portal.  It is written with [swagger 2](http://swagger.io/). 

    OpenAPI spec version: 0.11.0
    Contact: architecture@wso2.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class JWTClaimsCondition(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'invert_condition': 'bool',
        'claim_url': 'str',
        'attribute': 'str'
    }

    attribute_map = {
        'type': 'type',
        'invert_condition': 'invertCondition',
        'claim_url': 'claimUrl',
        'attribute': 'attribute'
    }

    def __init__(self, type=None, invert_condition=False, claim_url=None, attribute=None):
        """
        JWTClaimsCondition - a model defined in Swagger
        """

        self._type = None
        self._invert_condition = None
        self._claim_url = None
        self._attribute = None

        self.type = type
        if invert_condition is not None:
          self.invert_condition = invert_condition
        if claim_url is not None:
          self.claim_url = claim_url
        if attribute is not None:
          self.attribute = attribute

    @property
    def type(self):
        """
        Gets the type of this JWTClaimsCondition.

        :return: The type of this JWTClaimsCondition.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this JWTClaimsCondition.

        :param type: The type of this JWTClaimsCondition.
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")
        allowed_values = ["HeaderCondition", "IPCondition", "JWTClaimsCondition", "QueryParameterCondition"]
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def invert_condition(self):
        """
        Gets the invert_condition of this JWTClaimsCondition.

        :return: The invert_condition of this JWTClaimsCondition.
        :rtype: bool
        """
        return self._invert_condition

    @invert_condition.setter
    def invert_condition(self, invert_condition):
        """
        Sets the invert_condition of this JWTClaimsCondition.

        :param invert_condition: The invert_condition of this JWTClaimsCondition.
        :type: bool
        """

        self._invert_condition = invert_condition

    @property
    def claim_url(self):
        """
        Gets the claim_url of this JWTClaimsCondition.

        :return: The claim_url of this JWTClaimsCondition.
        :rtype: str
        """
        return self._claim_url

    @claim_url.setter
    def claim_url(self, claim_url):
        """
        Sets the claim_url of this JWTClaimsCondition.

        :param claim_url: The claim_url of this JWTClaimsCondition.
        :type: str
        """

        self._claim_url = claim_url

    @property
    def attribute(self):
        """
        Gets the attribute of this JWTClaimsCondition.

        :return: The attribute of this JWTClaimsCondition.
        :rtype: str
        """
        return self._attribute

    @attribute.setter
    def attribute(self, attribute):
        """
        Sets the attribute of this JWTClaimsCondition.

        :param attribute: The attribute of this JWTClaimsCondition.
        :type: str
        """

        self._attribute = attribute

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, JWTClaimsCondition):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
